service: gamemastery

provider:
  name: aws
  versionFunctions: false
  region: eu-central-1

functions:
  mixer:
    handler: mixer.handler
    runtime: python2.7

stepFunctions:
  stateMachines:
    MixerDownload:
      name: MixerDownloadStateMachine
      definition:
        StartAt: GetDownloadSize
        States:
          GetDownloadSize:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-mixer
            End: true

plugins:
  - serverless-dynamodb-local
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
  dynamodb:
    start:
      migrate: true

resources:
  Resources:
    GameRecordings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GameRecordings
        AttributeDefinitions:
          - AttributeName: "Channel"
            AttributeType: "S"
          - AttributeName: "Recording"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "Channel"
            KeyType: "HASH"
          - AttributeName: "Recording"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RecordingDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "RecordingDeadLetterQueue"
    RecordingDownloadQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "RecordingDownloadQueue"
        VisibilityTimeout: 14400
        RedrivePolicy:
          deadLetterTargetArn: ${self:resources.Outputs.RecordingDeadLetterQueue.Value}
          maxReceiveCount: 4

  Outputs:
    RecordingDeadLetterQueue:
      Description: "The ARN of the dead letter queue"
      Value:
        "Fn::GetAtt": [ RecordingDeadLetterQueue, Arn ]
